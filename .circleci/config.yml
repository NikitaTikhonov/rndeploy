version: 2.1
references:
  working_directory: ~/rnDeploy/android

  create_keystore_properties: &create_keystore_properties
    run:
      name: Create keystore.properties
      command: printf 'releaseKeyAlias=%s\nreleaseKeyPassword=%s\nreleaseKeyStore=%s\nreleaseStorePassword=%s' \
        $RELEASE_KEY_ALIAS $RELEASE_KEY_PASSWORD $RELEASE_KEYSTORE $RELEASE_STORE_PASSWORD > keystore.properties

  decode_android_key: &decode_android_key
    run:
      name: Decode Android key store
      command: echo $KEYSTORE | base64 -d | tee keystore app/key.keystore > /dev/null


jobs:
  node:
    working_directory: ~/rnDeploy
    docker:
      - image: cimg/node:12.16

    steps:
      - checkout

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - run:
          name: jest tests
          command: |
            mkdir -p test-results/jest
            yarn run test
          environment:
            JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - persist_to_workspace:
          root: ~/rnDeploy
          paths:
            - node_modules

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  android-build-and-test:
    working_directory: ~/rnDeploy/android
    docker:
      - image: circleci/android:api-29-node
    steps:
      - checkout:
          path: ~/rnDeploy

      - attach_workspace:
          at: ~/rnDeploy
      - *create_keystore_properties
      - *decode_android_key

      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}

      - run: bundle install

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          name: fastlane deploy
          command: |
            mkdir -p test-results/fastlane
            bundle exec fastlane dev flavor:alpha branch:${CIRCLE_BRANCH} app_id:$FIREBASE_APP_ID firebase_token:$FIREBASE_TOKEN groups:"test"

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results


  android-staging:
    working_directory: ~/rnDeploy/android
    docker:
      - image: circleci/android:api-29-node
    steps:
      - checkout:
          path: ~/rnDeploy

      - attach_workspace:
          at: ~/rnDeploy
      - *create_keystore_properties
      - *decode_android_key

      - restore_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}

      - run: bundle install

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - run:
          name: fastlane deploy
          command: |
            mkdir -p test-results/fastlane
            bundle exec fastlane staging flavor:alpha branch:${CIRCLE_BRANCH} \
            app_id:$FIREBASE_APP_ID firebase_token:$FIREBASE_TOKEN groups:"staging" my_variable:$MY_VARIABLE

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results



  macos-build-and-test:
    working_directory: ~/rnDeploy
    macos:
      xcode: 12.1.0
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test

    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

      #Pods directory is ignored to match default RN setup, but can also check them into source control
      #https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
      - restore_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}

      - run:
          command: pod install
          working_directory: ios

      - run:
          name: Set Ruby Version
          command: echo 'chruby ruby-2.6' >> ~/.bash_profile

      - run:
          command: bundle install
          working_directory: ios

      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - save_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ios/Pods

      - run:
          name: Fastlane
          command: bundle exec fastlane dev branch:${CIRCLE_BRANCH} app_id:$FIREBASE_IOS_APP_ID firebase_token:$FIREBASE_TOKEN groups:$GROUP
          working_directory: ios

      - store_artifacts:
          path: output

      - store_test_results:
          path: output/scan
  macos-staging:
    working_directory: ~/rnDeploy
    macos:
      xcode: 12.1.0
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: test

    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - restore_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

      #Pods directory is ignored to match default RN setup, but can also check them into source control
      #https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
      - restore_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}

      - run:
          command: pod install
          working_directory: ios

      - run:
          name: Set Ruby Version
          command: echo 'chruby ruby-2.6' >> ~/.bash_profile

      - run:
          command: bundle install
          working_directory: ios

      - save_cache:
          key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
          paths:
            - vendor/bundle

      - save_cache:
          key: pods-v1-{{ checksum "ios/Podfile.lock" }}-{{ arch }}
          paths:
            - ios/Pods

      - run:
          name: Fastlane
          command: bundle exec fastlane staging branch:${CIRCLE_BRANCH} app_id:$FIREBASE_IOS_APP_ID\
            firebase_token:$FIREBASE_TOKEN groups:"staging" my_variable:$MY_VARIABLE
          working_directory: ios

      - store_artifacts:
          path: output

      - store_test_results:
          path: output/scan

workflows:
  node-android-ios:
    jobs:
      - node
      - macos-build-and-test:
          requires:
            - node
          filters:
            branches:
              only:
                - develop
      - android-build-and-test:
          requires:
            - node
          filters:
            branches:
              only:
                - develop
      - android-staging:
          requires:
            - node
          filters:
            branches:
              only:
                - test
      - macos-staging:
          requires:
            - node
          filters:
            branches:
              only:
                - staging
